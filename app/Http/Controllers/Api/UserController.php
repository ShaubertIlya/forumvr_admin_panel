<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use Validator;

class UserController extends Controller
{
    public $successStatus = 200;

    public function register(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:forum_users',
            'password' => 'required|string|min:6|confirmed',
        ]);

        if ($validator->fails()) {
            return response(['errors'=>$validator->errors()->all()], 422);
        }

        $request['password'] = Hash::make($request['password']);
        $request['remember_token'] = Str::random(10);
        $user = User::create($request->toArray());
        $token = $user->createToken('MyApp')->accessToken;
        $response = ['token' => $token];

        return response($response, 200);
    }

    /**
     * login api
     *
     * @return \Illuminate\Http\Response
     */
    public function login()
    {
        if (Auth::attempt(['email' => request('email'), 'password' => request('password')])) {
            $user = Auth::user();
            $success['token'] = $user->createToken('MyApp')->accessToken;

            return response()->json(['success' => $success], $this->successStatus);
        } else {
            return response()->json(['error' => 'Unauthorised'], 401);
        }
    }

    function changePassword(Request $request)
    {
        $data = $request->all();
        $user = Auth::guard('api')->user();

        $validator = Validator::make($request->all(), [
            'oldPassword' => 'required|string|max:100',
            'newPassword' => 'required|string|min:6|max:100',
            'c_newPassword' => 'required|same:password',
        ]);

        if ($validator->fails()) {
            return response()->json(['error' => $validator->errors()], 401);
        }

        //checking the old password first
        $check = Auth::guard('web')->attempt([
            'username' => $user->username,
            'password' => $data['oldPassword']
        ]);

        if ($check) {
            $user->password = bcrypt($data['newPassword']);
            $user->isFirstTime = false; //variable created by me to know if is the dummy password or generated by user.
            $user->token()->revoke();
            $token = $user->createToken('newToken')->accessToken;

            //Changing the type
            $user->save();

            return ['token' => $token]; //sending the new token
        }

        return response()->json(['error' => ['oldPassword' => "Wrong password information"]], 401);
    }

    /**
     * details api
     *
     * @return \Illuminate\Http\Response
     */
    public function details()
    {
        $user = Auth::user();
        $profile = $user->profile;
        $business_information = $user->business_information;

        return response()->json($user, $this->successStatus);
    }
}
